name: GMLoader A30 (Toolchain Oficial Corrigido)
on:
  workflow_dispatch:
  push:
    branches: [ "master", "main" ]

jobs:
  build-with-a30-toolchain:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout GMLoader-Next
        uses: actions/checkout@v4
        with:
          repository: JohnnyonFlame/gmloader-next
          submodules: recursive
      
      - name: Setup Docker
        run: |
          echo "Verificando instalação do Docker..."
          if ! command -v docker &>/dev/null; then
            echo "Docker não encontrado, instalando..."
            sudo apt-get update -qq
            sudo apt-get install -y ca-certificates curl gnupg lsb-release
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
              https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update -qq
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          else
            echo "Docker já está instalado"
          fi
      
      - name: Clone A30 Toolchain
        run: |
          git clone https://codeberg.org/hydrogen18/miyooa30 --depth=1
      
      - name: Fix A30 Toolchain Dockerfile (Debian Buster archived)
        run: |
          cd miyooa30/dockerbuild
          echo "Corrigindo Dockerfile para usar repositórios arquivados..."
          
          # Backup
          cp Dockerfile Dockerfile.original
          
          # Adicionar comandos para corrigir sources.list DENTRO do container
          # Inserir ANTES do primeiro apt-get update
          sed -i '/RUN dpkg --add-architecture armhf/i \
          # Corrigir repositórios para archive.debian.org\
          RUN echo "deb http://archive.debian.org/debian/ buster main contrib non-free" > /etc/apt/sources.list && \\\
              echo "deb http://archive.debian.org/debian-security buster/updates main" >> /etc/apt/sources.list && \\\
              echo "Acquire::Check-Valid-Until false;" > /etc/apt/apt.conf.d/99no-check-valid-until' Dockerfile
          
          echo "Dockerfile corrigido!"
          echo ""
          echo "=== Primeiras 30 linhas do Dockerfile ==="
          head -30 Dockerfile
          echo ""
          echo "=== Diferenças ==="
          diff -u Dockerfile.original Dockerfile || true
      
      - name: Build A30 Toolchain Docker
        run: |
          cd miyooa30/dockerbuild
          echo "Iniciando build do toolchain (pode demorar 15-20 min)..."
          ./build.sh
      
      - name: Prepare GMLoader build files
        run: |
          echo "Preparando arquivos de configuração..."
          
          # Criar zipconf.h
          mkdir -p 3rdparty/libzip-config
          cat > 3rdparty/libzip-config/zipconf.h << 'ZIPCONF_END'
          #ifndef HAD_ZIPCONF_H
          #define HAD_ZIPCONF_H
          #define ZIP_EXTERN extern
          #define LIBZIP_VERSION "1.7.3"
          #include <stdint.h>
          typedef int64_t zip_int64_t;
          typedef uint64_t zip_uint64_t;
          typedef int32_t zip_int32_t;
          typedef uint32_t zip_uint32_t;
          typedef int16_t zip_int16_t;
          typedef uint16_t zip_uint16_t;
          typedef int8_t zip_int8_t;
          typedef uint8_t zip_uint8_t;
          #endif
          ZIPCONF_END
          
          # Script de build
          cat > build-in-container.sh << 'BUILD_SCRIPT'
          #!/bin/bash
          set -e
          
          cd /build
          
          echo "[1/6] Instalando dependências..."
          apt-get update -qq
          apt-get install -y cmake python3-pip libclang-dev llvm zlib1g-dev -qq || true
          pip3 install libclang 2>/dev/null || echo "Warning: pip3 install falhou"
          
          echo "[2/6] Configurando git..."
          git config --global --add safe.directory /build
          
          echo "[3/6] Atualizando submódulos..."
          git submodule update --init --recursive || echo "Warning: alguns submódulos falharam"
          
          echo "[4/6] Criando stubs libc..."
          mkdir -p build/arm-linux-gnueabihf/thunks/libc
          touch build/arm-linux-gnueabihf/thunks/libc/impl_header.h
          touch build/arm-linux-gnueabihf/thunks/libc/impl_tab.h
          
          echo "[5/6] Tentando gerar libc..."
          python3 scripts/generate_libc.py arm-linux-gnueabihf \
              --llvm-includes /usr/arm-linux-gnueabihf/include 2>&1 | head -20 || {
              echo "Warning: generate_libc falhou (usando stubs)"
          }
          
          echo "[6/6] Compilando GMLoader..."
          make -f Makefile.gmloader \
              ARCH=arm-linux-gnueabihf \
              OPTM="-O2 -march=armv7-a -mtune=cortex-a7 -mfpu=neon -mfloat-abi=hard" \
              USE_FMOD=0 \
              SDL_CFLAGS="" \
              SDL_LDFLAGS="-lSDL2" \
              -j$(nproc) 2>&1 | tee /tmp/build.log
          
          BUILD_EXIT=${PIPESTATUS[0]}
          
          if [ $BUILD_EXIT -ne 0 ]; then
              echo ""
              echo "===================================="
              echo "ERRO NA COMPILAÇÃO!"
              echo "===================================="
              echo ""
              echo "Últimas 100 linhas do log:"
              tail -100 /tmp/build.log
              echo ""
              echo "Arquivos .o compilados:"
              find build/ -name "*.o" 2>/dev/null | wc -l
              exit 1
          fi
          
          if [ -f "gmloadernext.arm-linux-gnueabihf" ]; then
              echo ""
              echo "===================================="
              echo "✓ BUILD SUCESSO!"
              echo "===================================="
              ls -lh gmloadernext.arm-linux-gnueabihf
              cp gmloadernext.arm-linux-gnueabihf /output/
          else
              echo ""
              echo "===================================="
              echo "✗ BINÁRIO NÃO FOI GERADO"
              echo "===================================="
              echo ""
              echo "Conteúdo do diretório build:"
              ls -laR build/ | head -100
              exit 1
          fi
          BUILD_SCRIPT
          
          chmod +x build-in-container.sh
      
      - name: Build GMLoader with A30 Toolchain
        run: |
          mkdir -p output
          
          echo "Iniciando compilação no container do A30..."
          docker run --rm \
            -v $(pwd):/build \
            -v $(pwd)/output:/output \
            miyooa30-toolchain \
            bash /build/build-in-container.sh
      
      - name: Verify and Package
        run: |
          if [ ! -f "output/gmloadernext.arm-linux-gnueabihf" ]; then
            echo "✗ Binário não foi gerado!"
            exit 1
          fi
          
          echo "✓ Binário compilado com toolchain do A30!"
          ls -lh output/gmloadernext.arm-linux-gnueabihf
          
          # Verificar dependências
          echo ""
          echo "Dependências do binário:"
          docker run --rm -v $(pwd)/output:/check miyooa30-toolchain ldd /check/gmloadernext.arm-linux-gnueabihf || true
          
          # Preparar pacote
          mkdir -p a30_package/lib
          cp output/gmloadernext.arm-linux-gnueabihf a30_package/gmloadernext.armhf
          chmod +x a30_package/gmloadernext.armhf
          
          # Libs
          cp -r lib/redist/* a30_package/lib/ 2>/dev/null || true
          
          # Config
          cat > a30_package/gmloader.json << 'EOF'
          {
            "save_dir": "saves",
            "apk_path": "your_game.apk",
            "show_cursor": false,
            "disable_controller": false,
            "force_platform": "os_android"
          }
          EOF
          
          # Script
          cat > a30_package/gmloader.sh << 'EOF'
          #!/bin/sh
          LOG="/mnt/SDCARD/Roms/PORTS/gmloader/gmloader.log"
          cd /mnt/SDCARD/Roms/PORTS/gmloader
          
          echo "=== GMLoader Log ===" > "$LOG"
          date >> "$LOG"
          
          export LD_LIBRARY_PATH=./lib:$LD_LIBRARY_PATH
          
          echo "Iniciando..." >> "$LOG"
          ./gmloadernext.armhf -c gmloader.json >> "$LOG" 2>&1
          echo "Exit code: $?" >> "$LOG"
          EOF
          chmod +x a30_package/gmloader.sh
          
          # README
          cat > a30_package/README.txt << 'EOF'
          GMLoader-Next for Miyoo A30
          ============================
          
          Compilado com toolchain OFICIAL do Miyoo A30
          Compatível com GLIBC 2.23
          
          INSTALAÇÃO:
          -----------
          1. Copiar para: /mnt/SDCARD/Roms/PORTS/gmloader/
          2. gmloader.sh para: /mnt/SDCARD/Roms/PORTS/
          3. Adicionar APK
          4. Editar gmloader.json
          5. Executar!
          
          LOGS: gmloader.log
          
          Se der erro de GLIBC, o binário não é compatível.
          Verifique o log para detalhes.
          EOF
          
          # Tar
          cd a30_package
          tar -czf ../gmloader-a30-toolchain.tar.gz *
          cd ..
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gmloader_a30_official_toolchain
          path: |
            output/gmloadernext.arm-linux-gnueabihf
            gmloader-a30-toolchain.tar.gz
            a30_package/
