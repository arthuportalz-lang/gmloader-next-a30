name: GMLoader A30 (Toolchain ARM genérico)
on:
  workflow_dispatch:
  push:
    branches: [ "master", "main" ]

jobs:
  build-generic-arm:
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout GMLoader-Next
        uses: actions/checkout@v4
        with:
          repository: JohnnyonFlame/gmloader-next
          submodules: recursive
      
      - name: Install ARM cross-compilation toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf \
            binutils-arm-linux-gnueabihf \
            python3 \
            python3-pip \
            cmake \
            git
          
          # Instalar versão antiga do libstdc++ para compatibilidade com GLIBC 2.23
          sudo apt-get install -y gcc-8-arm-linux-gnueabihf g++-8-arm-linux-gnueabihf || true
      
      - name: Setup build environment
        run: |
          # Criar zipconf.h
          mkdir -p 3rdparty/libzip-config
          cat > 3rdparty/libzip-config/zipconf.h << 'EOF'
          #ifndef HAD_ZIPCONF_H
          #define HAD_ZIPCONF_H
          #define ZIP_EXTERN extern
          #define LIBZIP_VERSION "1.7.3"
          #include <stdint.h>
          typedef int64_t zip_int64_t;
          typedef uint64_t zip_uint64_t;
          typedef int32_t zip_int32_t;
          typedef uint32_t zip_uint32_t;
          typedef int16_t zip_int16_t;
          typedef uint16_t zip_uint16_t;
          typedef int8_t zip_int8_t;
          typedef uint8_t zip_uint8_t;
          #endif
          EOF
          
          # Criar stubs libc
          mkdir -p build/arm-linux-gnueabihf/thunks/libc
          cat > build/arm-linux-gnueabihf/thunks/libc/impl_header.h << 'EOF'
          #ifndef IMPL_HEADER_H
          #define IMPL_HEADER_H
          #endif
          EOF
          
          cat > build/arm-linux-gnueabihf/thunks/libc/impl_tab.h << 'EOF'
          #ifndef IMPL_TAB_H
          #define IMPL_TAB_H
          #endif
          EOF
          
          # Modificar Makefile para não chamar generate_libc
          sed -i '/python3 scripts\/generate_libc.py/d' Makefile.gmloader
      
      - name: Build for A30 (GLIBC 2.23 compatible)
        run: |
          # Usar GCC-8 se disponível (GLIBC mais antiga)
          if command -v arm-linux-gnueabihf-gcc-8 &> /dev/null; then
            export CC=arm-linux-gnueabihf-gcc-8
            export CXX=arm-linux-gnueabihf-g++-8
          fi
          
          make -f Makefile.gmloader \
            ARCH=arm-linux-gnueabihf \
            OPTM="-O2 -march=armv7-a -mtune=cortex-a7 -mfpu=neon -mfloat-abi=hard -static-libgcc -static-libstdc++" \
            USE_FMOD=0 \
            SDL_CFLAGS="" \
            SDL_LDFLAGS="-lSDL2 -lpthread -lm -ldl" \
            -j$(nproc) || exit 1
      
      - name: Verify build
        run: |
          if [ -f "gmloadernext.arm-linux-gnueabihf" ]; then
            echo "✓ Build successful!"
            ls -lh gmloadernext.arm-linux-gnueabihf
            file gmloadernext.arm-linux-gnueabihf
            ldd gmloadernext.arm-linux-gnueabihf || true
          else
            echo "✗ Build failed"
            ls -la build/arm-linux-gnueabihf/ || true
            exit 1
          fi
      
      - name: Package for A30
        run: |
          mkdir -p a30_package/lib
          
          # Copiar binário
          cp gmloadernext.arm-linux-gnueabihf a30_package/gmloadernext.armhf
          chmod +x a30_package/gmloadernext.armhf
          
          # Copiar libs redist
          cp -r lib/redist/* a30_package/lib/ 2>/dev/null || true
          
          # Config
          cat > a30_package/gmloader.json << 'EOF'
          {
            "save_dir": "saves",
            "apk_path": "your_game.apk",
            "show_cursor": false,
            "disable_controller": false,
            "force_platform": "os_android"
          }
          EOF
          
          # Script com log
          cat > a30_package/gmloader.sh << 'EOF'
          #!/bin/sh
          LOG="/mnt/SDCARD/Roms/PORTS/gmloader/gmloader.log"
          cd /mnt/SDCARD/Roms/PORTS/gmloader
          
          echo "=== GMLoader ===" > "$LOG"
          date >> "$LOG"
          
          export LD_LIBRARY_PATH=./lib:$LD_LIBRARY_PATH
          
          echo "Iniciando GMLoader..." >> "$LOG"
          ./gmloadernext.armhf -c gmloader.json >> "$LOG" 2>&1
          
          echo "Finalizado: $?" >> "$LOG"
          EOF
          chmod +x a30_package/gmloader.sh
          
          # README
          cat > a30_package/README.txt << 'EOF'
          GMLoader-Next for Miyoo A30
          ============================
          
          Build com static linking para compatibilidade com GLIBC 2.23
          
          INSTALAÇÃO:
          1. Copiar para: /mnt/SDCARD/Roms/PORTS/gmloader/
          2. Copiar gmloader.sh para: /mnt/SDCARD/Roms/PORTS/
          3. Adicionar APK do jogo
          4. Editar gmloader.json
          5. Executar!
          
          LOGS: gmloader.log (na pasta)
          
          Se crashar, verifique:
          - APK é GameMaker (não Unity/Godot)
          - GLIBC: ldd gmloadernext.armhf
          - Permissões: chmod +x gmloadernext.armhf
          
          Testado com: GLIBC 2.23+
          EOF
          
          # Tar
          cd a30_package
          tar -czf ../gmloader-a30-static.tar.gz *
          cd ..
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gmloader_a30_static_build
          path: |
            gmloadernext.arm-linux-gnueabihf
            gmloader-a30-static.tar.gz
            a30_package/
